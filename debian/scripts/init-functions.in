. /lib/init/vars.sh
. /lib/lsb/init-functions

PATH='/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin'
DAEMON='%file_binary%'

set -e
[ -x "${DAEMON}" ]

case "${NAME}" in
nginx)
  conf='%file_config%'
  pid='%file_pid%'
;;
root-nginx)
  conf='%root_file_config%'
  pid='%root_file_pid%'
;;
*)
  echo "unknown instance: \`${NAME}'" >&2
  exit 1
;;
esac

defaults="/etc/default/${NAME}"
if [ -s "${defaults}" ]; then
  . "${defaults}"
fi

STOP_SCHEDULE=${STOP_SCHEDULE:-'QUIT/5/TERM/5/KILL/5'}

if [ -s "${conf}" ]; then
  PID=$(grep -Ev '^\s*#' "${conf}" | \
    awk 'BEGIN { RS="[;{}]" } { if ($1 == "pid") print $2 }' | head -n 1)
fi
PID=${PID:-${pid}}

if [ -n "${ULIMIT}" ]; then
  ulimit ${ULIMIT}
fi

if [ "${NAME}" = 'root-nginx' ]; then
  DAEMON_OPTS=${DAEMON_OPTS}${DAEMON_OPTS:+' '}"-c ${conf}"
fi

ssd_exec() {
  start-stop-daemon --quiet --pidfile "${PID}" --exec "${DAEMON}" "$@"
}

ssd_name() {
  start-stop-daemon --quiet --pidfile "${PID}" --name "${NAME}" "$@"
}

is_nginx_running() {
  ssd_exec --start --test >/dev/null
}

start_nginx() {
  # Start the daemon/service
  #
  # Returns:
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  is_nginx_running || return 1
  ssd_exec --start -- ${DAEMON_OPTS} 2>/dev/null || return 2
}

test_config() {
  "${DAEMON}" ${DAEMON_OPTS} -t >/dev/null 2>/dev/null
}

stop_nginx() {
  # Stops the daemon/service
  #
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred

  ssd_name --stop --retry=${STOP_SCHEDULE}
  RETVAL="$?"
  sleep 1
  return "${RETVAL}"
}

reload_nginx() {
  ssd_name --stop --signal HUP
  return 0
}

rotate_logs() {
  ssd_name --stop --signal USR1
  return 0
}

upgrade_nginx() {
  # Online upgrade nginx executable
  # http://nginx.org/en/docs/control.html
  #
  # Return
  #   0 if nginx has been successfully upgraded
  #   1 if nginx is not running
  #   2 if the pid files were not created on time
  #   3 if the old master could not be killed

  if ! ssd_name --stop --signal USR2; then
    return 1
  fi

  OLDPID="${PID}.oldbin"

  # Wait for both old and new master to write their pid file
  while ! [ -s "${OLDPID}" -a -s "${PID}" ]; do
    cnt=$(expr ${cnt} + 1)
    if [ ${cnt} -gt 10 ]; then
      return 2
    fi
    sleep 1
  done

  # Everything is ready, gracefully stop the old master
  if ! PID="${OLDPID}" ssd_name --stop --signal QUIT; then
    return 3
  fi

  return 0
}

case "$1" in
start)
  log_daemon_msg "Starting ${DESC}"
  start_nginx
  case "$?" in
  0|1) log_end_msg 0 ;;
  2)   log_end_msg 1 ;;
  esac
;;
stop)
  log_daemon_msg "Stopping ${DESC}"
  stop_nginx
  case "$?" in
  0|1) log_end_msg 0 ;;
  2)   log_end_msg 1 ;;
  esac
;;
restart|try-restart)
  case "$1" in
  restart)
    log_daemon_msg "Restarting ${DESC}"
  ;;
  try-restart)
    log_daemon_msg "Try restarting ${DESC}"

    if ! is_nginx_running; then
      log_end_msg 0
      exit
    fi
  ;;
  esac

  # Check configuration before stopping nginx
  if ! test_config; then
    log_end_msg 1
    exit
  fi

  stop_nginx
  case "$?" in
  0|1)
    start_nginx
    case "$?" in
    0) log_end_msg 0 ;;
    1) log_end_msg 1 ;; # Old process is still running
    *) log_end_msg 1 ;; # Failed to start
    esac
  ;;
  *)
    # Failed to stop
    log_end_msg 1
  ;;
  esac
;;
reload|force-reload)
  log_daemon_msg "Reloading ${NAME} configuration"

  # Check configuration before stopping nginx
  #
  # This is not entirely correct since the on-disk nginx binary
  # may differ from the in-memory one, but that's not common.
  # We prefer to check the configuration and return an error
  # to the administrator.
  if ! test_config; then
    log_end_msg 1
    exit $?
  fi

  reload_nginx
  log_end_msg $?
;;
configtest|testconfig)
  log_daemon_msg "Testing ${NAME} configuration"
  test_config
  log_end_msg $?
;;
status)
  status_of_proc -p "${PID}" "${DAEMON}" "${NAME}"
;;
upgrade)
  log_daemon_msg "Upgrading binary" "${NAME}"
  upgrade_nginx
  log_end_msg $?
;;
rotate)
  log_daemon_msg "Re-opening ${NAME} log files"
  rotate_logs
  log_end_msg $?
;;
*)
  log_action_msg "Usage: $0 {start|stop|restart|try-restart|reload|force-reload|status|configtest|testconfig|rotate|upgrade}"
  exit 1
;;
esac
